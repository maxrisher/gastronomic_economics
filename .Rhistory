ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, product_sold_by_unit) %>%
distinct() %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz) %>%
view()
ingredients_clean
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams, product_sold_by_unit) %>%
distinct() %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz) %>%
view()
ingredients_clean
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz) %>%
view()
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz) %>%
view()
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz) %>%
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, product_sold_by_unit) %>%
distinct() %>%
slice_head(n=237) %>%
print(n=500)
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz)
View(error_detect)
# Libraries ---------------------------------------------------------------
library(tidyverse)
# Load data ---------------------------------------------------------------
ingredient_budget_bytes_prices <-
read_csv("data/budget_bytes_ingredients_prices.csv")
ingredients_to_query_and_grams <-
read_csv("data/full_processed_ingredients.csv")
distinct_ingredients <-
read_csv("data/budget_bytes_ingredients.csv")
ingredients_to_kroger <-
read_csv("data/ingredients_kroger_upc.csv")
recipe_descriptions <-
read_csv("data/all_budget_bytes_recipes.csv")
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz)
budget_bytes_ingredients <-
ingredient_budget_bytes_prices %>%
rename(recipe_ingredient_description = ingredient,
recipe_ingredient_price = cost) %>%
select(recipe_name, recipe_ingredient_description, recipe_ingredient_price) %>%
left_join(distinct_ingredients, by = join_by(recipe_ingredient_description == ingredient)) %>%
rename(ingredient_description_id = rowid)
bb_ingredients_query_grams <-
budget_bytes_ingredients %>%
left_join(ingredients_to_query_and_grams, by = join_by(ingredient_description_id == rowid)) %>%
rename(claude_query_for_kroger = query,
claude_ingredient_gram_estimate = grams) %>%
select(!ingredient_description_id)
bb_ingredients_kroger_products <-
bb_ingredients_query_grams %>%
left_join(ingredients_to_kroger, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_clean <-
bb_ingredients_kroger_products %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price
))
ingredients_final <-
ingredients_clean %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz)
error_detect
View(error_detect)
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, product_sold_by_unit) %>%
distinct() %>%
slice_head(n=237) %>%
print(n=500)
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, product_sold_by_unit) %>%
distinct() %>%
slice_tail(n=250) %>%
print(n=500)
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, product_sold_by_unit) %>%
distinct() %>%
slice_tail(n=250) %>%
print(n=500)
View(error_detect)
??case_when
# Full ingredients clean data ---------------------------------------------------
budget_bytes_ingredients <-
ingredient_budget_bytes_prices %>%
rename(recipe_ingredient_description = ingredient,
recipe_ingredient_price = cost) %>%
select(recipe_name, recipe_ingredient_description, recipe_ingredient_price) %>%
left_join(distinct_ingredients, by = join_by(recipe_ingredient_description == ingredient)) %>%
rename(ingredient_description_id = rowid)
bb_ingredients_query_grams <-
budget_bytes_ingredients %>%
left_join(ingredients_to_query_and_grams, by = join_by(ingredient_description_id == rowid)) %>%
rename(claude_query_for_kroger = query,
claude_ingredient_gram_estimate = grams) %>%
select(!ingredient_description_id)
bb_ingredients_kroger_products <-
bb_ingredients_query_grams %>%
left_join(ingredients_to_kroger, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_clean <-
bb_ingredients_kroger_products %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price
))
# Make sure ingredients data are correct ----------------------------------
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz)
# This item seems to be wrong: private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork
# ounces it seems to get right
# just arrange them from estimated ounces high to low and check the descriptions
# Create final ingredients dataset ----------------------------------------
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final
View(ingredients_final)
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,
.default = claude_product_grams_estimate)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,
.default = claude_product_grams_estimate)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
View(ingredients_final)
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price))
View(recipe_costs)
View(recipe_costs)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium)
View(recipe_descriptions)
View(clean_recipes)
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
high_protein_g_per_cal
min_protein_g_per_cal
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = bb_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
View(recipes_with_cost)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
View(recipes_with_cost)
View(ingredients_final)
View(ingredients_final)
ingredients_clean <-
bb_ingredients_kroger_products %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price
),
vegetarian = if_else(grepl("Meat & Seafood", product_categories), FALSE, TRUE))
View(ingredients_clean)
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,
.default = claude_product_grams_estimate)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price),
vegetarian = all(vegetarian))
View(recipe_costs)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium)
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
recipe_costs %>%
mutate(bb_underest = kroger_price - bb_price) %>%
view()
# Libraries ---------------------------------------------------------------
library(tidyverse)
# Load data ---------------------------------------------------------------
ingredient_budget_bytes_prices <-
read_csv("data/budget_bytes_ingredients_prices.csv")
ingredients_to_query_and_grams <-
read_csv("data/full_processed_ingredients.csv")
distinct_ingredients <-
read_csv("data/budget_bytes_ingredients.csv")
ingredients_to_kroger <-
read_csv("data/ingredients_kroger_upc.csv")
recipe_descriptions <-
read_csv("data/all_budget_bytes_recipes.csv")
# Full ingredients clean data ---------------------------------------------------
budget_bytes_ingredients <-
ingredient_budget_bytes_prices %>%
rename(recipe_ingredient_description = ingredient,
recipe_ingredient_price = cost) %>%
select(recipe_name, recipe_ingredient_description, recipe_ingredient_price) %>%
left_join(distinct_ingredients, by = join_by(recipe_ingredient_description == ingredient)) %>%
rename(ingredient_description_id = rowid)
bb_ingredients_query_grams <-
budget_bytes_ingredients %>%
left_join(ingredients_to_query_and_grams, by = join_by(ingredient_description_id == rowid)) %>%
rename(claude_query_for_kroger = query,
claude_ingredient_gram_estimate = grams) %>%
select(!ingredient_description_id)
bb_ingredients_kroger_products <-
bb_ingredients_query_grams %>%
left_join(ingredients_to_kroger, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_clean <-
bb_ingredients_kroger_products %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price
),
vegetarian = if_else(grepl("Meat & Seafood", product_categories), FALSE, TRUE))
# Make sure ingredients data are correct ----------------------------------
error_detect <-
ingredients_clean %>%
filter(!is.na(kroger_upc)) %>%
select(product_name, claude_product_grams_estimate, product_sold_by_unit) %>%
distinct() %>%
mutate(claude_ounces = claude_product_grams_estimate * 0.035274) %>%
mutate(fl_oz = grepl("fl oz", product_sold_by_unit),
gal = grepl("gal", product_sold_by_unit),
pound = grepl("pound", product_sold_by_unit),
lb = grepl("lb", product_sold_by_unit),
count = grepl("ct", product_sold_by_unit),
ounces = grepl("oz", product_sold_by_unit)) %>%
mutate(unknown = !lb & !gal & !count & !ounces & !pound & !fl_oz,
only_ounces = ounces & !count & !lb & !gal & !pound & !fl_oz,
only_count = count & !lb & !gal & !ounces & !pound & !fl_oz,
very_tough = only_count | unknown,
tough = very_tough | gal | fl_oz)
# This item seems to be wrong: private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork
# ounces it seems to get right
# just arrange them from estimated ounces high to low and check the descriptions
# Create final ingredients dataset ----------------------------------------
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,
.default = claude_product_grams_estimate)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
View(ingredients_final)
View(error_detect)
ingredients_final <-
ingredients_clean %>%
# Fix a clearly incorrect sell_by_unit from count to lb.
mutate(claude_product_grams_estimate = case_when(product_name == "private-selection-heritage-boneless-pork-shoulder-roast-natural-duroc-pork" ~ 453.59200,
.default = claude_product_grams_estimate)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
View(ingredients_final)
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price),
vegetarian = all(vegetarian))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium)
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
View(recipes_with_cost)
