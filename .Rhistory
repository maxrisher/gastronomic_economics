bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final %>%
distinct(claude_query_for_kroger, product_price_per_g) %>%
arrange(desc(product_price_per_g)) %>%
view()
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price))
ingredients_final
View(recipe_costs)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium)
View(clean_recipes)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
View(recipe_descriptions)
View(clean_recipes)
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
View(recipes_with_cost)
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()
View(recipes_with_cost)
recipe_descriptions
View(recipe_descriptions)
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein))
View(recipe_descriptions)
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein),
fiber = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1, fiber),
calories = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 552, calories),
fat = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 18, fat),
carbohydrates = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 33, carbohydrates),
sodium = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1722, sodium))
View(recipe_descriptions)
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein),
fiber = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1, fiber),
calories = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 552, calories),
fat = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 18, fat),
carbohydrates = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 33, carbohydrates),
sodium = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1722, sodium))
# Merge up ----------------------------------------------------------------
merged_ingredients <-
fixed_grains_mass %>%
left_join(kroger_corrected, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_final <-
merged_ingredients %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final %>%
distinct(claude_query_for_kroger, product_price_per_g) %>%
arrange(desc(product_price_per_g)) %>%
view()
ingredients_to_kroger %>%
count(query) %>%
arrange(desc(n))
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()
recipe_descriptions
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
# This recipe nutrition data was incorrectly read
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein),
fiber = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1, fiber),
calories = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 552, calories),
fat = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 18, fat),
carbohydrates = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 33, carbohydrates),
sodium = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1722, sodium)) %>%
# This recipe has bad nutrition data
filter(recipe_name != "Limbers")
recipe_descriptions
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
# This recipe nutrition data was incorrectly read
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein),
fiber = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1, fiber),
calories = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 552, calories),
fat = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 18, fat),
carbohydrates = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 33, carbohydrates),
sodium = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1722, sodium)) %>%
# This recipe has bad nutrition data
filter(recipe_name != "Limbers")
recipe_descriptions
# Merge up ----------------------------------------------------------------
merged_ingredients <-
fixed_grains_mass %>%
left_join(kroger_corrected, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_final <-
merged_ingredients %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final %>%
distinct(claude_query_for_kroger, product_price_per_g) %>%
arrange(desc(product_price_per_g)) %>%
view()
ingredients_to_kroger %>%
count(query) %>%
arrange(desc(n))
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()
recipes_with_cost %>%
ggplot(mapping= aes(x = total_fat/total_calories, y = cost_per_calorie))+
geom_point()
recipes_with_cost %>%
ggplot(mapping= aes(x = total_carbs/total_calories, y = cost_per_calorie))+
geom_point()
recipes_with_cost %>%
ggplot(mapping= aes(x = total_fiber/total_calories, y = cost_per_calorie))+
geom_point()
View(recipes_with_cost)
# Correct recipe data -----------------------------------------------------
recipe_descriptions <-
recipe_descriptions %>%
# This recipe nutrition data was incorrectly read
mutate(protein = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 66, protein),
fiber = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1, fiber),
calories = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 552, calories),
fat = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 18, fat),
carbohydrates = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 33, carbohydrates),
sodium = if_else(recipe_name == "Roasted Turkey Breast with Stuffing", 1722, sodium)) %>%
# This recipe has bad nutrition data
mutate(protein = if_else(recipe_name == "Slow Cooker Chicken", 64, protein),
fiber = if_else(recipe_name == "Slow Cooker Chicken", NA, fiber),
calories = if_else(recipe_name == "Slow Cooker Chicken", 397, calories),
fat = if_else(recipe_name == "Slow Cooker Chicken", 15, fat),
carbohydrates = if_else(recipe_name == "Slow Cooker Chicken", 1.5, carbohydrates),
sodium = if_else(recipe_name == "Slow Cooker Chicken", NA, sodium)) %>%
# This recipe has bad nutrition data
filter(recipe_name != "Limbers")
# Merge up ----------------------------------------------------------------
merged_ingredients <-
fixed_grains_mass %>%
left_join(kroger_corrected, by = join_by(claude_query_for_kroger == food_name)) %>%
rename(kroger_query = query,
claude_product_grams_estimate = product_grams)
ingredients_final <-
merged_ingredients %>%
mutate(product_name = str_extract(product_uri, "/p/([^/]+)") %>% str_remove("/p/"),
kroger_upc = str_extract(product_uri, "\\d+(?=\\?)"),
recipe_ingredient_price = gsub("\\$", "", recipe_ingredient_price),
recipe_ingredient_price = as.double(recipe_ingredient_price),
price = case_when(
recipe_ingredient_price == 0 ~ 0,
TRUE ~ product_local_price)) %>%
mutate(product_price_per_g = price / claude_product_grams_estimate,
ingredient_price = product_price_per_g * claude_ingredient_gram_estimate,
bb_underspend = ingredient_price - recipe_ingredient_price)
ingredients_final %>%
distinct(claude_query_for_kroger, product_price_per_g) %>%
arrange(desc(product_price_per_g)) %>%
view()
ingredients_to_kroger %>%
count(query) %>%
arrange(desc(n))
# Recipe analysis ---------------------------------------------------------
recipe_costs <-
ingredients_final %>%
group_by(recipe_name) %>%
summarise(bb_price = sum(recipe_ingredient_price),
total_grams = sum(claude_ingredient_gram_estimate),
kroger_price = sum(ingredient_price))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
# Visualization -----------------------------------------------------------
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()
View(recipes_with_cost)
lm(cost_per_2500_cal ~ protein_g_per_cal, data = recipe_costs)
lm(cost_per_2500_cal ~ protein_g_per_cal, data = recipes_with_cost)
lm(cost_per_calorie ~ protein_g_per_cal, data = recipes_with_cost)
0.022489*100
model <-
lm(cost_per_calorie ~ protein_g_per_cal, data = recipes_with_cost)
residuals(model)
recipes_with_cost
recipes_with_cost %>%
ggplot(mapping= aes(x = total_fiber/total_calories, y = cost_per_calorie))+
geom_point()
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()+
geom_smooth(method="lm")
recipes_with_cost %>%
ggplot(mapping= aes(x = protein_g_per_cal, y = cost_per_calorie))+
geom_point()+
geom_smooth(method="lm", se = FALSE)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams)
View(recipes_with_cost)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(cost_per_calorie = kroger_price / total_calories,
cost_per_2500_cal = 2500 * cost_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
cost_per_gram = kroger_price / total_grams,
fiber_per_100g = total_fiber / total_grams,
calories_per_100g = total_calories / total_grams)
View(recipes_with_cost)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(dollars_per_calorie = kroger_price / total_calories,
dollars_per_2500_cal = 2500 * dollars_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
dollars_per_gram = kroger_price / total_grams,
fiber_per_100g = total_fiber / total_grams,
calories_per_100g = total_calories / total_grams)
View(recipes_with_cost)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(dollars_per_calorie = kroger_price / total_calories,
dollars_per_2500_cal = 2500 * dollars_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
dollars_per_100g = 100*kroger_price / total_grams,
fiber_per_100g = total_fiber / total_grams,
calories_per_100g = total_calories / total_grams)
View(recipes_with_cost)
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(dollars_per_calorie = kroger_price / total_calories,
dollars_per_2500_cal = 2500 * dollars_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
dollars_per_100g = 100*kroger_price / total_grams,
fiber_g_per_100g = total_fiber / total_grams,
calories_per_100g = total_calories / total_grams)
View(recipes_with_cost)
View(recipes_with_cost)
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
high_g_protein
write_csv(recipes_with_cost, "final_recipe_table.csv")
recipe_descriptions
recipe_urls <-
recipe_descriptions %>%
select(recipe_name, url)
recipe_urls <-
recipe_descriptions %>%
select(recipe_name, url)
final_recipe_table <-
recipes_with_cost %>%
left_join(recipes_with_cost)
recipe_urls
recipe_urls <-
recipe_descriptions %>%
select(recipe_name, url) %>%
distinct()
recipe_urls
final_recipe_table <-
recipes_with_cost %>%
left_join(recipes_with_cost)
View(recipes_with_cost)
View(recipe_urls)
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, recipe_urls, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, recipe_url, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
clean_recipes <-
recipe_descriptions %>%
mutate(total_calories = serving_count * calories,
total_fat = serving_count * fat,
total_carbs = serving_count * carbohydrates,
total_protein = serving_count * protein,
total_fiber = serving_count * fiber,
total_sodium = serving_count * sodium) %>%
select(recipe_name, url, rating, number_of_ratings, prep_time, cook_time, total_calories, total_fat, total_carbs, total_protein, total_fiber, total_sodium) %>%
left_join(animal_products, by = join_by(recipe_name))
weight_lbs <- 175
recommended_g_protein <- 0.36 * weight_lbs
high_g_protein <- 0.75 * weight_lbs
calories_consumed <- 2500
min_protein_g_per_cal <- recommended_g_protein / calories_consumed
high_protein_g_per_cal <- high_g_protein / calories_consumed
recipes_with_cost <-
clean_recipes %>%
left_join(recipe_costs, by = join_by(recipe_name)) %>%
mutate(dollars_per_calorie = kroger_price / total_calories,
dollars_per_2500_cal = 2500 * dollars_per_calorie,
protein_g_per_cal = total_protein / total_calories,
protein_g_per_100cal = protein_g_per_cal*100,
protein_per_2500_cal = 2500 * protein_g_per_cal,
sufficient_protein = ifelse(protein_g_per_cal > min_protein_g_per_cal, TRUE, FALSE),
high_protein = ifelse(protein_g_per_cal > high_protein_g_per_cal, TRUE, FALSE),
dollars_per_100g = 100*kroger_price / total_grams,
fiber_g_per_100g = total_fiber / total_grams,
calories_per_100g = total_calories / total_grams)
View(recipes_with_cost)
final_recipe_table <-
recipes_with_cost %>%
relocate(c(url, recipe_name), .before = everything())
View(final_recipe_table)
final_recipe_table <-
recipes_with_cost %>%
relocate(c(url, recipe_name, dollars_per_2500_cal, protein_per_2500_cal, calories_per_100g, vegetarian, sufficient_protein, fiber_g_per_100g), .before = everything())
View(final_recipe_table)
final_recipe_table <-
recipes_with_cost %>%
relocate(c(url, recipe_name, dollars_per_2500_cal, protein_per_2500_cal, calories_per_100g, vegetarian, sufficient_protein, fiber_g_per_100g), .before = everything())
write_csv(final_recipe_table, "final_recipe_table.csv")
